// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiTenant.Catalog.Infrastructure.Migrations.SqlServer;

#nullable disable

namespace MultiTenant.Catalog.Infrastructure.Migrations.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerCatalogContext))]
    [Migration("20220507075101_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BusinessId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("BusinessId1");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VatNumber")
                        .IsUnique()
                        .HasFilter("[VatNumber] IS NOT NULL");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Expiry")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDemoPlan")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDatabaseSize")
                        .HasColumnType("int");

                    b.Property<int>("MaxStorageSize")
                        .HasColumnType("int");

                    b.Property<int>("MaxUserCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DatabaseProvider")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerPort")
                        .HasColumnType("int");

                    b.Property<int>("ServerType")
                        .HasColumnType("int");

                    b.Property<string>("ServerUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Expiry")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DatabaseProvider")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionString")
                        .IsUnique();

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResourceId");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("511074ad-75fd-4e42-9431-f26bf20f5fd4"),
                            ConcurrencyStamp = "a9d91894-ace1-4ec8-920b-56be9b3e54c1",
                            Name = "User-CanAdd",
                            NormalizedName = "USER-CANADD",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("df665298-f652-45d3-9d0b-7cb0a101c0ef"),
                            ConcurrencyStamp = "6f68388b-f91d-4f3a-ae38-e6ad2032d481",
                            Name = "User-CanUpdate",
                            NormalizedName = "USER-CANUPDATE",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("d241b4cc-ac50-4dc5-8da0-499406712c14"),
                            ConcurrencyStamp = "30ae639c-57fa-4033-93e1-b0aee5f991fe",
                            Name = "User-CanDelete",
                            NormalizedName = "USER-CANDELETE",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("74b28a56-a909-499f-abe1-e113cce60e0d"),
                            ConcurrencyStamp = "c034ae04-8b30-4e1e-b7b0-e78eab9baffd",
                            Name = "User-CanViewAll",
                            NormalizedName = "USER-CANVIEWALL",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("bd60be96-847a-4f8a-90e8-1f2a87e37cb5"),
                            ConcurrencyStamp = "eaf14ac7-36c8-4ca3-99b5-b40a3e896e5c",
                            Name = "User-CanDeactivate",
                            NormalizedName = "USER-CANDEACTIVATE",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("3d0826eb-9e93-4656-a2bf-05852f6016ec"),
                            ConcurrencyStamp = "d552f13d-37c3-41cc-af0e-15ea9d788e62",
                            Name = "User-CanRevokeOthersAccess",
                            NormalizedName = "USER-CANREVOKEOTHERSACCESS",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("93bfe3e8-0b34-49db-9568-892c21e7238e"),
                            ConcurrencyStamp = "04eb664c-7f19-4cb1-8ac3-d7be13646dbb",
                            Name = "User-CanViewDetails",
                            NormalizedName = "USER-CANVIEWDETAILS",
                            Section = "User"
                        },
                        new
                        {
                            Id = new Guid("492dbb6f-d131-4bf9-a599-48d942535ade"),
                            ConcurrencyStamp = "20804c7c-60c7-4d25-840e-d65da84d3762",
                            Name = "Plan-CanAdd",
                            NormalizedName = "PLAN-CANADD",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("1c618c85-561a-4341-9091-06c2d13fc9e9"),
                            ConcurrencyStamp = "996acdfb-62ed-45fa-b768-f703e269f268",
                            Name = "Plan-CanUpdate",
                            NormalizedName = "PLAN-CANUPDATE",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("3bbc70db-658a-4ce8-9c82-6df573baa8a1"),
                            ConcurrencyStamp = "b1c6b6e5-ec5a-41b6-8263-85b8f6e82575",
                            Name = "Plan-CanDelete",
                            NormalizedName = "PLAN-CANDELETE",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("5c33c191-11a8-435b-84a1-215a4d0437ee"),
                            ConcurrencyStamp = "2ab92e19-9d1f-476f-a956-0648597b1ced",
                            Name = "Plan-CanViewAll",
                            NormalizedName = "PLAN-CANVIEWALL",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("ba155014-03fb-458a-80ec-96a8a18ea6f2"),
                            ConcurrencyStamp = "0ed5ac50-79be-4207-993d-27722144c666",
                            Name = "Plan-CanViewOwn",
                            NormalizedName = "PLAN-CANVIEWOWN",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("61ce7b11-0d21-4068-81e1-4a822cb8b041"),
                            ConcurrencyStamp = "5a53062c-8129-4db1-b91b-e78536cf2f15",
                            Name = "Plan-CanViewDetails",
                            NormalizedName = "PLAN-CANVIEWDETAILS",
                            Section = "Plan"
                        },
                        new
                        {
                            Id = new Guid("7a6f42c1-f0a2-4772-b336-a48f16decf5a"),
                            ConcurrencyStamp = "0f310a04-7eea-4015-bdbe-d7e1bafb4f41",
                            Name = "Organization-CanAdd",
                            NormalizedName = "ORGANIZATION-CANADD",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("841608e5-f99f-45c2-8b54-d2f982f55fa7"),
                            ConcurrencyStamp = "abee3e61-4181-4426-81c2-dd4a3d4daefa",
                            Name = "Organization-CanUpdate",
                            NormalizedName = "ORGANIZATION-CANUPDATE",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("bbc949ed-32bc-43b7-ac5b-7d91666ed19d"),
                            ConcurrencyStamp = "8aced989-119b-4839-9329-e1fd3fca246f",
                            Name = "Organization-CanDelete",
                            NormalizedName = "ORGANIZATION-CANDELETE",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("3a67f77f-41ab-49f0-a4b2-c147dd0d701c"),
                            ConcurrencyStamp = "56cb22e3-281c-463d-8f95-96180b4d3461",
                            Name = "Organization-CanViewAll",
                            NormalizedName = "ORGANIZATION-CANVIEWALL",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("5df00ce9-8138-41d0-b628-1edfe6b1a91f"),
                            ConcurrencyStamp = "7e374f96-33b2-411d-b453-e5a2699cd2dc",
                            Name = "Organization-CanViewOwn",
                            NormalizedName = "ORGANIZATION-CANVIEWOWN",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("6b33be72-ceb8-4ea7-a43f-84ec0bc8e180"),
                            ConcurrencyStamp = "a254175b-c36f-4201-a43f-169184c642e6",
                            Name = "Organization-CanViewDetails",
                            NormalizedName = "ORGANIZATION-CANVIEWDETAILS",
                            Section = "Organization"
                        },
                        new
                        {
                            Id = new Guid("76ffcd67-ec05-4b3b-b659-2db86802d0ca"),
                            ConcurrencyStamp = "5c16ac3e-35be-48b2-bda2-df953ac5cfcf",
                            Name = "Business-CanAdd",
                            NormalizedName = "BUSINESS-CANADD",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("05bfd857-f681-4803-956b-3629362f3e15"),
                            ConcurrencyStamp = "8a511392-4371-4300-b408-37630811fa64",
                            Name = "Business-CanUpdate",
                            NormalizedName = "BUSINESS-CANUPDATE",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("90fcb673-06c8-4dec-9c91-2c7fa765dc58"),
                            ConcurrencyStamp = "2b2f7a5d-0500-4ddd-821b-46c356867e72",
                            Name = "Business-CanDelete",
                            NormalizedName = "BUSINESS-CANDELETE",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("126dcd1f-3c51-4e77-a12a-41def263dfbf"),
                            ConcurrencyStamp = "7ba721cc-5e63-4f42-bf98-e08036f72020",
                            Name = "Business-CanViewAll",
                            NormalizedName = "BUSINESS-CANVIEWALL",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("8a769e22-cdd3-46a8-9464-88e8984f3955"),
                            ConcurrencyStamp = "9edf1f04-4b9e-4c22-96f3-a5b01647ef49",
                            Name = "Business-CanViewOwn",
                            NormalizedName = "BUSINESS-CANVIEWOWN",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("d7c9abc2-1f01-4a5b-b8ca-384e7da773b0"),
                            ConcurrencyStamp = "e92e3919-9bad-49ba-a04f-ea64475514f9",
                            Name = "Business-CanViewDetails",
                            NormalizedName = "BUSINESS-CANVIEWDETAILS",
                            Section = "Business"
                        },
                        new
                        {
                            Id = new Guid("881b4895-175a-43bf-bb23-23dda79a96eb"),
                            ConcurrencyStamp = "3321b77d-a9f0-4a95-a7b9-8597d4ccbe6d",
                            Name = "Subscription-CanAdd",
                            NormalizedName = "SUBSCRIPTION-CANADD",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("dd050589-ece2-42d9-9eaf-345835022d23"),
                            ConcurrencyStamp = "c3a9dcc7-395a-452c-8dbd-056a1fb5b544",
                            Name = "Subscription-CanUpdate",
                            NormalizedName = "SUBSCRIPTION-CANUPDATE",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("50ae886e-5baf-4ef7-8a8c-ca8954efe88f"),
                            ConcurrencyStamp = "e0656185-dc8d-4e78-8c78-3e62bb461042",
                            Name = "Subscription-CanDelete",
                            NormalizedName = "SUBSCRIPTION-CANDELETE",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("4d8ad27e-8645-4c88-9c30-1690e6cfb719"),
                            ConcurrencyStamp = "535b49ab-45fe-4382-8b24-9c2238974166",
                            Name = "Subscription-CanViewAll",
                            NormalizedName = "SUBSCRIPTION-CANVIEWALL",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("d328242e-966d-4552-9eb1-fce1cf18f3f9"),
                            ConcurrencyStamp = "937346b5-a570-4c6b-a1aa-5e52211f9923",
                            Name = "Subscription-CanViewOwn",
                            NormalizedName = "SUBSCRIPTION-CANVIEWOWN",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("06fbccc0-bbec-45fe-81c9-d5a2950e813b"),
                            ConcurrencyStamp = "ffd246c3-b206-43ee-a800-0106a04aaa83",
                            Name = "Subscription-CanViewDetails",
                            NormalizedName = "SUBSCRIPTION-CANVIEWDETAILS",
                            Section = "Subscription"
                        },
                        new
                        {
                            Id = new Guid("e245925c-f5bb-4048-a7cf-b4720969350a"),
                            ConcurrencyStamp = "26deeffd-3912-44c9-a119-d2888563af7a",
                            Name = "Tenant-CanAdd",
                            NormalizedName = "TENANT-CANADD",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("520fdc1b-6284-483a-b649-f745212a1513"),
                            ConcurrencyStamp = "b1537d4b-1d9f-459f-9822-2f89de73ae19",
                            Name = "Tenant-CanUpdate",
                            NormalizedName = "TENANT-CANUPDATE",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("4f23197d-e165-4dc9-acac-24cccf29a910"),
                            ConcurrencyStamp = "4e7bfed8-b651-4341-b31c-4ea8ebed5ab3",
                            Name = "Tenant-CanDelete",
                            NormalizedName = "TENANT-CANDELETE",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("6c1ab3ac-c77a-4612-8856-59e434db671c"),
                            ConcurrencyStamp = "25f1b317-0d72-497b-8043-a62f1e553325",
                            Name = "Tenant-CanViewAll",
                            NormalizedName = "TENANT-CANVIEWALL",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("efc86cbf-d47c-4dbc-907c-05033999d721"),
                            ConcurrencyStamp = "ed62b53c-41e9-4394-bff6-1ec5534825be",
                            Name = "Tenant-CanViewOwn",
                            NormalizedName = "TENANT-CANVIEWOWN",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("fd4c0abe-7b81-4146-ab0e-df86462e8409"),
                            ConcurrencyStamp = "244bcfe0-547d-477d-9c6e-ac70c7e658b0",
                            Name = "Tenant-CanViewDetails",
                            NormalizedName = "TENANT-CANVIEWDETAILS",
                            Section = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("f0cc39c8-b283-42fe-b70f-5ca3444610df"),
                            ConcurrencyStamp = "b40daba3-23f9-40ac-91c7-8cc67db1a242",
                            Name = "Resources-CanAdd",
                            NormalizedName = "RESOURCES-CANADD",
                            Section = "Resources"
                        },
                        new
                        {
                            Id = new Guid("909d133f-1c7c-4a75-ba91-8f075b8986ab"),
                            ConcurrencyStamp = "d01e9c4c-f71d-4c3f-ae29-0a91057b194a",
                            Name = "Resources-CanUpdate",
                            NormalizedName = "RESOURCES-CANUPDATE",
                            Section = "Resources"
                        },
                        new
                        {
                            Id = new Guid("fa457656-bbed-4dc3-8b24-21015c29b5af"),
                            ConcurrencyStamp = "11fb7e16-9ae6-41dd-94cc-cd92f1e91982",
                            Name = "Resources-CanDelete",
                            NormalizedName = "RESOURCES-CANDELETE",
                            Section = "Resources"
                        },
                        new
                        {
                            Id = new Guid("b2c3c71c-ae60-40c4-beba-b4c0738ef316"),
                            ConcurrencyStamp = "a28b2114-329d-4e33-b480-d0a35ba93bbb",
                            Name = "Resources-CanViewAll",
                            NormalizedName = "RESOURCES-CANVIEWALL",
                            Section = "Resources"
                        },
                        new
                        {
                            Id = new Guid("e38c9683-1578-476b-b65c-85c66109fa3c"),
                            ConcurrencyStamp = "cd0c3075-ba80-4987-85a6-64b8f6c51322",
                            Name = "Resources-CanViewOwn",
                            NormalizedName = "RESOURCES-CANVIEWOWN",
                            Section = "Resources"
                        },
                        new
                        {
                            Id = new Guid("c57149ce-b62d-4aa4-9f44-489889853b89"),
                            ConcurrencyStamp = "536f43be-5957-4f6e-bf01-1da98b0b55cf",
                            Name = "Resources-CanViewDetails",
                            NormalizedName = "RESOURCES-CANVIEWDETAILS",
                            Section = "Resources"
                        });
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.RoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6b3dd98-7eea-44db-b5e6-41ba17632904",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@tenant-catalog.com",
                            EmailConfirmed = true,
                            Gender = 2,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "ADMIN@TENANT-CATALOG.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLKdzP+T8hcRVRYWUx4X2Fd75P/a34kaqGsIHwICV7oDwyx9uylxn3A2brG9NEA7A==",
                            PhoneNumber = "+2 01100072682",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("511074ad-75fd-4e42-9431-f26bf20f5fd4")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("df665298-f652-45d3-9d0b-7cb0a101c0ef")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("d241b4cc-ac50-4dc5-8da0-499406712c14")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("74b28a56-a909-499f-abe1-e113cce60e0d")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("bd60be96-847a-4f8a-90e8-1f2a87e37cb5")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("3d0826eb-9e93-4656-a2bf-05852f6016ec")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("93bfe3e8-0b34-49db-9568-892c21e7238e")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("492dbb6f-d131-4bf9-a599-48d942535ade")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("1c618c85-561a-4341-9091-06c2d13fc9e9")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("3bbc70db-658a-4ce8-9c82-6df573baa8a1")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("5c33c191-11a8-435b-84a1-215a4d0437ee")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("ba155014-03fb-458a-80ec-96a8a18ea6f2")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("61ce7b11-0d21-4068-81e1-4a822cb8b041")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("7a6f42c1-f0a2-4772-b336-a48f16decf5a")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("841608e5-f99f-45c2-8b54-d2f982f55fa7")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("bbc949ed-32bc-43b7-ac5b-7d91666ed19d")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("3a67f77f-41ab-49f0-a4b2-c147dd0d701c")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("5df00ce9-8138-41d0-b628-1edfe6b1a91f")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("6b33be72-ceb8-4ea7-a43f-84ec0bc8e180")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("76ffcd67-ec05-4b3b-b659-2db86802d0ca")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("05bfd857-f681-4803-956b-3629362f3e15")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("90fcb673-06c8-4dec-9c91-2c7fa765dc58")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("126dcd1f-3c51-4e77-a12a-41def263dfbf")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("8a769e22-cdd3-46a8-9464-88e8984f3955")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("d7c9abc2-1f01-4a5b-b8ca-384e7da773b0")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("881b4895-175a-43bf-bb23-23dda79a96eb")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("dd050589-ece2-42d9-9eaf-345835022d23")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("50ae886e-5baf-4ef7-8a8c-ca8954efe88f")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("4d8ad27e-8645-4c88-9c30-1690e6cfb719")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("d328242e-966d-4552-9eb1-fce1cf18f3f9")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("06fbccc0-bbec-45fe-81c9-d5a2950e813b")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("e245925c-f5bb-4048-a7cf-b4720969350a")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("520fdc1b-6284-483a-b649-f745212a1513")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("4f23197d-e165-4dc9-acac-24cccf29a910")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("6c1ab3ac-c77a-4612-8856-59e434db671c")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("efc86cbf-d47c-4dbc-907c-05033999d721")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("f0cc39c8-b283-42fe-b70f-5ca3444610df")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("909d133f-1c7c-4a75-ba91-8f075b8986ab")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("fa457656-bbed-4dc3-8b24-21015c29b5af")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("b2c3c71c-ae60-40c4-beba-b4c0738ef316")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("e38c9683-1578-476b-b65c-85c66109fa3c")
                        },
                        new
                        {
                            UserId = new Guid("79349908-ee08-4b2f-b1dd-f8bd35b92753"),
                            RoleId = new Guid("c57149ce-b62d-4aa4-9f44-489889853b89")
                        });
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Organization", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Business", null)
                        .WithMany("Organizations")
                        .HasForeignKey("BusinessId1");

                    b.OwnsMany("MultiTenant.Catalog.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("OrganizationId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("MultiTenant.Catalog.Domain.ValueObjects.Contact", "Contact", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Business");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Organization", "Organization")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Tenant", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Organization", "Organization")
                        .WithOne("Tenant")
                        .HasForeignKey("MultiTenant.Catalog.Domain.Entities.Tenant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Resource", "Resource")
                        .WithMany("Tenants")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.RoleClaims", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserClaims", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserLogins", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserRoles", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Users.UserTokens", b =>
                {
                    b.HasOne("MultiTenant.Catalog.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Business", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Plan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MultiTenant.Catalog.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Tenants");
                });
#pragma warning restore 612, 618
        }
    }
}
